Applied Visual Design: Set the font-size for Multiple Heading Elements
<style>
    h1{
        font-size: 68px;
    }    
</style>
<h1>This is h1 text</h1>

Applied Visual Design: Set the font-weight for Multiple Heading Elements
<style>
    h1{
        font-size: 68px;
        font-weight: 800;
    }    
</style>
<h1>This is h1 text</h1>

Applied Visual Design: Set the font-size of Paragraph Text
<style>
  p {
    font-size: 16px;
  }
</style>
<p></p>

Applied Visual Design: Set the line-height of Paragraphs
<style>
  p {
    font-size: 16px;
   line-height: 25px;
  }
</style>
<p></p>

Applied Visual Design: Adjust the Hover State of an Anchor Tag
<style>
  .black-text {
    color: black;
  }
  a:hover {
    color: blue;
  }

</style>
<a class="black-text" href="http://freecatphotoapp.com/" target="_blank" >CatPhotoApp</a>

Applied Visual Design: Change an Element's Relative Position
<style>
  h2 {
    position: relative;
    top: 15px;
  }
</style>
<body>
  <h1>On Being Well-Positioned</h1>
  <h2>Move me!</h2>
  <p>I still think the h2 is where it normally sits.</p>
</body>

Applied Visual Design: Move a Relatively Positioned Element with CSS Offsets
Applied Visual Design: Lock an Element to its Parent with Absolute Positioning
Applied Visual Design: Lock an Element to the Browser Window with Fixed Positioning
<style>
  #navbar {
    position: fixed;
    top: 0;
    left: 0;   
    
    width: 100%;
    background-color: #767676;
  }
 </style>
 
 
Applied Visual Design: Push Elements Left or Right with the float Property
  <style>
  #left {
    float: left;
    width: 50%;
  }
  #right {
    float: right;
    width: 40%;
  }
  aside, section {
    padding: 2px;
    background-color: #ccc;
  }
  </style>
  
Applied Visual Design: Change the Position of Overlapping Elements with the z-index Property
<style>
  div {
    width: 60%;
    height: 200px;
    margin-top: 20px;
  }
  
  .first {
    background-color: red;
    position: absolute;
    z-index: 2;
    
  }
  .second {
    background-color: blue;
    position: absolute;
    left: 40px;
    top: 50px;
    z-index: 1;
  }
</style>

<div class="first"></div>
<div class="second"></div>

Applied Visual Design: Center an Element Horizontally Using the margin Property
<style>
  div {
    background-color: blue;
    height: 100px;
    width: 100px;
    margin: auto;
    
  }
</style>
<div></div>

Applied Visual Design: Learn about Complementary Colors
<style>
  body {
    background-color: #FFFFFF;
  }
  
  .orange {
    background-color: #FF7D00;
  }
  
  .cyan {
    background-color: #00FFFF;
  }
  
  .raspberry {
    background-color: #FF007D;
  }
  
  div {
    height: 100px;
    width: 100px;
    margin-bottom: 5px;
  }
</style>
  
<div class="orange"></div>
<div class="cyan"></div>
<div class="raspberry"></div>

Applied Visual Design: Adjust the Color of Various Elements to Complementary Colors
<style>
  body {
    background-color: white;
  }
  header {
    background-color: 09A7A1;
    color: white;
    padding: 0.25em;
  }
  h2 {
    color: 09A7A1;
  }  
  button {
    background-color: FF790E;
  }
  footer {
    background-color: 09A7A1;
    color: white;
    padding: 0.5em;
  }
</style>
<header>
  <h1>Cooking with FCC!</h1>
</header>
<main>
  <article>
    <h2>Machine Learning in the Kitchen</h2>
    <p>Join this two day workshop that walks through how to implement cutting-edge snack-getting algorithms with a command line interface. Coding usually involves writing exact instructions, but sometimes you need your computer to execute flexible commands, like <code>fetch Pringles</code>.</p>
    <button>Sign Up</button>
  </article>
  <article>
    <h2>Bisection Vegetable Chopping</h2>
    <p>This week-long retreat will level-up your coding ninja skills to actual ninja skills. No longer is the humble bisection search limited to sorted arrays or coding interview questions, applying its concepts in the kitchen will have you chopping carrots in O(log n) time before you know it.</p>
    <button>Sign Up</button>
  </article>
</main>
<br>
<footer>&copy; 2018 FCC Kitchen</footer>

Applied Visual Design: Adjust the Hue of a Color
<style>
  body {
    background-color: #FFFFFF;
  }
  
  .green {
    background-color: hsl(120, 100%, 50%);
  }
  
  .cyan {
    background-color: hsl(180, 100%, 50%);
  }
  
  .blue {
    background-color: hsl(240, 100%, 50%);
  }
  
  div {
    display: inline-block;
    height: 100px;
    width: 100px;
  }
</style>
  
<div class="green"></div>
<div class="cyan"></div>
<div class="blue"></div>

Applied Visual Design: Adjust the Tone of a Color
<style>
  header {
    background-color: hsl(180, 90%, 35%);
    color: #FFFFFF;
  }
  
  nav {
    background-color: hsl(180, 80%, 25%);
  }
  
  h1 {
    text-indent: 10px;
    padding-top: 10px;
  }
  
  nav ul {
    margin: 0px;
    padding: 5px 0px 5px 30px;
  }
  
  nav li {
    display: inline;
    margin-right: 20px;
  }
  
  a {
    text-decoration: none;
    color: inherit;
  }
</style>
  
<header>
  <h1>Cooking with FCC!</h1>
  <nav>
    <ul>
      <li><a href="">Home</a></li>
      <li><a href="">Classes</a></li>
      <li><a href="">Contact</a></li>
    </ul>
  </nav>
</header>

Applied Visual Design: Create a Gradual CSS Linear Gradient
<style>

  div{ 
    border-radius: 20px;
    width: 70%;
    height: 400px;
    margin: 50px auto;
    background: linear-gradient(35deg, #CCFFFF, #FFCCCC);
  }

</style>

<div> </div>

Applied Visual Design: Use a CSS Linear Gradient to Create a Striped Element
Make stripes by changing the repeating-linear-gradient() to use a gradient angle of 45deg, then set the first two color stops to yellow, and finally the second two color stops to black.

<style>

  div{ 
    border-radius: 20px;
    width: 70%;
    height: 400px;
    margin:  50 auto;
    background: repeating-linear-gradient(
      45deg,
      yellow 0px,
      yellow 20px,
      blue 20px,
      yellow 40px,
      black 40px,
      red 60px,
      black 80px
    );
  }

</style>

<div></div>

